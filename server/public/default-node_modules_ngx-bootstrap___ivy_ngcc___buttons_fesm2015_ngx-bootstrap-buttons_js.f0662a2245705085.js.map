{"version":3,"file":"default-node_modules_ngx-bootstrap___ivy_ngcc___buttons_fesm2015_ngx-bootstrap-buttons_js.f0662a2245705085.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA+K;AAC5H;;AAEnD;AACA;AACA,cAAc,wFAAwF;AACtG;AACA;AACA,WAAW,GAAG;AAC0B;AACxC;AACA,aAAa,6DAAiB;AAC9B;AACA,iBAAiB,yDAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E,6CAA6C,+DAAwB,GAAG,yJAAyJ;AACjO,QAAQ,wDAAiB,wEAAwE,uBAAuB;AACxH,MAAM;AACN,QAAQ,yDAAkB;AAC1B,QAAQ,yDAAkB;AAC1B,OAAO,YAAY,0EAA0E,aAAa,gEAAyB,sCAAsC;AACzK;AACA,wBAAwB,MAAM,gDAAK,EAAE;AACrC,yBAAyB,MAAM,gDAAK,EAAE;AACtC,cAAc,MAAM,sDAAW,2BAA2B,IAAI,MAAM,sDAAW,gCAAgC;AAC/G,gBAAgB,MAAM,uDAAY,oBAAoB;AACtD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS,GAAG,IAAI;AAChB,IAAI,KAAK,EAAE,EAiCV;;AAED;AACA;AACA,cAAc,wFAAwF;AACtG;AACA,WAAW,GAAG;AACd;AACA,aAAa,6DAAiB;AAC9B;AACA,iBAAiB,yDAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;A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CA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA,uBAAuB,GAAG;AAC1B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA,uBAAuB,GAAG;AAC1B;AACA,+EAA+E,0BAA0B;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,iFAAiF,4CAA4C,+DAAwB,CAAC,4DAAwB;AAC9K,+CAA+C,+DAAwB,GAAG,gKAAgK;AAC1O,QAAQ,4DAAqB;AAC7B,MAAM;AACN;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,OAAO,wFAAwF;AAC/F,QAAQ,wDAAiB,0EAA0E,uBAAuB,yEAAyE,sBAAsB,2GAA2G,gCAAgC,yGAAyG,gCAAgC,yGAAyG,oCAAoC,qGAAqG,oCAAoC;AACnwB,MAAM;AACN,QAAQ,yDAAkB;AAC1B,OAAO,aAAa,gEAAyB,qCAAqC;AAClF;AACA;AACA,MAAM,MAAM,4DAAiB;AAC7B;AACA;AACA,aAAa,MAAM,sDAAW,wBAAwB;AACtD,qBAAqB,MAAM,0DAAe,SAAS,yDAAU;AAC7D,4BAA4B;AAC5B;AACA,gDAAgD;AAChD,iBAAiB,MAAM,sDAAW,4BAA4B;AAC9D,gBAAgB,MAAM,uDAAY,oBAAoB;AACtD,eAAe,MAAM,uDAAY,mBAAmB;AACpD,mBAAmB,MAAM,uDAAY,6CAA6C,IAAI,MAAM,uDAAY,4CAA4C;AACpJ,uBAAuB,MAAM,uDAAY,4CAA4C,IAAI,MAAM,uDAAY,0CAA0C;AACrJ;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,4DAAwB,EAAE,IAAI,IAAI;AACxE,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,0DAAe;AACjC,mBAAmB,yDAAU;AAC7B,wCAAwC;AACxC;AACA,SAAS,GAAG,IAAI;AAChB,IAAI,KAAK,EAAE,EAwBV;;AAED;AACA;AACA,cAAc,wFAAwF;AACtG;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,mCAAmC,8DAAuB,GAAG,qBAAqB;AAClF,mCAAmC,8DAAuB,GAAG;AAC7D,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,kBAAkB,+KAA+K,IAAI;;AAEhS;AACA;AACA,cAAc,wFAAwF;AACtG;;AAEA;AACA;AACA,cAAc,wFAAwF;AACtG;;AAEoN","sources":["./node_modules/ngx-bootstrap/__ivy_ngcc__/buttons/fesm2015/ngx-bootstrap-buttons.js"],"sourcesContent":["import { forwardRef, Directive, Input, HostBinding, HostListener, ElementRef, ChangeDetectorRef, Renderer2, Optional, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: config: activeClass - Class to apply to the checked buttons\n/** @type {?} */\nimport * as Éµngcc0 from '@angular/core';\nconst CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => ButtonCheckboxDirective)),\n    multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nclass ButtonCheckboxDirective {\n    constructor() {\n        /**\n         * Truthy value, will be set to ngModel\n         */\n        this.btnCheckboxTrue = true;\n        /**\n         * Falsy value, will be set to ngModel\n         */\n        this.btnCheckboxFalse = false;\n        this.state = false;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    // view -> model\n    /**\n     * @return {?}\n     */\n    onClick() {\n        if (this.isDisabled) {\n            return;\n        }\n        this.toggle(!this.state);\n        this.onChange(this.value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.toggle(this.trueValue === this.value);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    get trueValue() {\n        return typeof this.btnCheckboxTrue !== 'undefined'\n            ? this.btnCheckboxTrue\n            : true;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    get falseValue() {\n        return typeof this.btnCheckboxFalse !== 'undefined'\n            ? this.btnCheckboxFalse\n            : false;\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    toggle(state) {\n        this.state = state;\n        this.value = this.state ? this.trueValue : this.falseValue;\n    }\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.state = this.trueValue === value;\n        this.value = value ? this.trueValue : this.falseValue;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n}\nButtonCheckboxDirective.Éµfac = function ButtonCheckboxDirective_Factory(t) { return new (t || ButtonCheckboxDirective)(); };\nButtonCheckboxDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: ButtonCheckboxDirective, selectors: [[\"\", \"btnCheckbox\", \"\"]], hostVars: 3, hostBindings: function ButtonCheckboxDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"click\", function ButtonCheckboxDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } if (rf & 2) {\n        Éµngcc0.ÉµÉµattribute(\"aria-pressed\", ctx.state);\n        Éµngcc0.ÉµÉµclassProp(\"active\", ctx.state);\n    } }, inputs: { btnCheckboxTrue: \"btnCheckboxTrue\", btnCheckboxFalse: \"btnCheckboxFalse\" }, features: [Éµngcc0.ÉµÉµProvidersFeature([CHECKBOX_CONTROL_VALUE_ACCESSOR])] });\nButtonCheckboxDirective.propDecorators = {\n    btnCheckboxTrue: [{ type: Input }],\n    btnCheckboxFalse: [{ type: Input }],\n    state: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(ButtonCheckboxDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[btnCheckbox]',\n                providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n            }]\n    }], function () { return []; }, { btnCheckboxTrue: [{\n            type: Input\n        }], btnCheckboxFalse: [{\n            type: Input\n        }], state: [{\n            type: HostBinding,\n            args: ['class.active']\n        }, {\n            type: HostBinding,\n            args: ['attr.aria-pressed']\n        }], \n    // view -> model\n    /**\n     * @return {?}\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\nif (false) {\n    /**\n     * Truthy value, will be set to ngModel\n     * @type {?}\n     */\n    ButtonCheckboxDirective.prototype.btnCheckboxTrue;\n    /**\n     * Falsy value, will be set to ngModel\n     * @type {?}\n     */\n    ButtonCheckboxDirective.prototype.btnCheckboxFalse;\n    /** @type {?} */\n    ButtonCheckboxDirective.prototype.state;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.isDisabled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.onChange;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.onTouched;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => ButtonRadioDirective)),\n    multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nclass ButtonRadioDirective {\n    /**\n     * @param {?} el\n     * @param {?} cdr\n     * @param {?} renderer\n     * @param {?} group\n     */\n    constructor(el, cdr, renderer, group) {\n        this.el = el;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        this.group = group;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n        this.role = 'radio';\n        this._hasFocus = false;\n    }\n    /**\n     * Current value of radio component or group\n     * @return {?}\n     */\n    get value() {\n        return this.group ? this.group.value : this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this.group) {\n            this.group.value = value;\n            return;\n        }\n        this._value = value;\n    }\n    /**\n     * If `true` â radio button is disabled\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) {\n        this.setDisabledState(disabled);\n    }\n    /**\n     * @return {?}\n     */\n    get controlOrGroupDisabled() {\n        return this.disabled || (this.group && this.group.disabled) ? true : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get hasDisabledClass() {\n        // Although the radio is disabled the active radio should still stand out.\n        // The disabled class will prevent this so don't add it on the active radio\n        return this.controlOrGroupDisabled && !this.isActive;\n    }\n    /**\n     * @return {?}\n     */\n    get isActive() {\n        return this.btnRadio === this.value;\n    }\n    /**\n     * @return {?}\n     */\n    get tabindex() {\n        if (this.controlOrGroupDisabled) {\n            // Disabled radio buttons should not receive focus\n            return undefined;\n        }\n        else if (this.isActive || this.group == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get hasFocus() {\n        return this._hasFocus;\n    }\n    /**\n     * @return {?}\n     */\n    toggleIfAllowed() {\n        if (!this.canToggle()) {\n            return;\n        }\n        this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n        this._onChange(this.value);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onSpacePressed(event) {\n        this.toggleIfAllowed();\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    focus() {\n        this.el.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    onFocus() {\n        this._hasFocus = true;\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this._hasFocus = false;\n        this.onTouched();\n    }\n    /**\n     * @return {?}\n     */\n    canToggle() {\n        return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.uncheckable = typeof this.uncheckable !== 'undefined';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _onChange(value) {\n        if (this.group) {\n            this.group.value = value;\n            return;\n        }\n        this.onTouched();\n        this.onChange(value);\n    }\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    setDisabledState(disabled) {\n        this._disabled = disabled;\n        if (disabled) {\n            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n            return;\n        }\n        this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n    }\n}\nButtonRadioDirective.Éµfac = function ButtonRadioDirective_Factory(t) { return new (t || ButtonRadioDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ChangeDetectorRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(forwardRef(( /**\n                 * @return {?}\n                 */() => ButtonRadioGroupDirective)), 8)); };\nButtonRadioDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: ButtonRadioDirective, selectors: [[\"\", \"btnRadio\", \"\"]], hostVars: 8, hostBindings: function ButtonRadioDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"click\", function ButtonRadioDirective_click_HostBindingHandler() { return ctx.toggleIfAllowed(); })(\"keydown.space\", function ButtonRadioDirective_keydown_space_HostBindingHandler($event) { return ctx.onSpacePressed($event); })(\"focus\", function ButtonRadioDirective_focus_HostBindingHandler() { return ctx.onFocus(); })(\"blur\", function ButtonRadioDirective_blur_HostBindingHandler() { return ctx.onBlur(); });\n    } if (rf & 2) {\n        Éµngcc0.ÉµÉµattribute(\"role\", ctx.role)(\"aria-disabled\", ctx.controlOrGroupDisabled)(\"aria-checked\", ctx.isActive)(\"tabindex\", ctx.tabindex);\n        Éµngcc0.ÉµÉµclassProp(\"disabled\", ctx.hasDisabledClass)(\"active\", ctx.isActive);\n    } }, inputs: { value: \"value\", disabled: \"disabled\", uncheckable: \"uncheckable\", btnRadio: \"btnRadio\" }, features: [Éµngcc0.ÉµÉµProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR])] });\n/** @nocollapse */\nButtonRadioDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Renderer2 },\n    { type: ButtonRadioGroupDirective, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => ButtonRadioGroupDirective)),] }] }\n];\nButtonRadioDirective.propDecorators = {\n    btnRadio: [{ type: Input }],\n    uncheckable: [{ type: Input }],\n    value: [{ type: Input }],\n    disabled: [{ type: Input }],\n    controlOrGroupDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],\n    hasDisabledClass: [{ type: HostBinding, args: ['class.disabled',] }],\n    isActive: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-checked',] }],\n    role: [{ type: HostBinding, args: ['attr.role',] }],\n    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n    toggleIfAllowed: [{ type: HostListener, args: ['click',] }],\n    onSpacePressed: [{ type: HostListener, args: ['keydown.space', ['$event'],] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(ButtonRadioDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[btnRadio]',\n                providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: Éµngcc0.ElementRef }, { type: Éµngcc0.ChangeDetectorRef }, { type: Éµngcc0.Renderer2 }, { type: ButtonRadioGroupDirective, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [forwardRef(( /**\n                                     * @return {?}\n                                     */() => ButtonRadioGroupDirective))]\n            }] }]; }, { role: [{\n            type: HostBinding,\n            args: ['attr.role']\n        }], value: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], controlOrGroupDisabled: [{\n            type: HostBinding,\n            args: ['attr.aria-disabled']\n        }], hasDisabledClass: [{\n            type: HostBinding,\n            args: ['class.disabled']\n        }], isActive: [{\n            type: HostBinding,\n            args: ['class.active']\n        }, {\n            type: HostBinding,\n            args: ['attr.aria-checked']\n        }], tabindex: [{\n            type: HostBinding,\n            args: ['attr.tabindex']\n        }], \n    /**\n     * @return {?}\n     */\n    toggleIfAllowed: [{\n            type: HostListener,\n            args: ['click']\n        }], \n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onSpacePressed: [{\n            type: HostListener,\n            args: ['keydown.space', ['$event']]\n        }], \n    /**\n     * @return {?}\n     */\n    onFocus: [{\n            type: HostListener,\n            args: ['focus']\n        }], \n    /**\n     * @return {?}\n     */\n    onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }], uncheckable: [{\n            type: Input\n        }], btnRadio: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    ButtonRadioDirective.prototype.onChange;\n    /** @type {?} */\n    ButtonRadioDirective.prototype.onTouched;\n    /**\n     * Radio button value, will be set to `ngModel`\n     * @type {?}\n     */\n    ButtonRadioDirective.prototype.btnRadio;\n    /**\n     * If `true` â radio button can be unchecked\n     * @type {?}\n     */\n    ButtonRadioDirective.prototype.uncheckable;\n    /** @type {?} */\n    ButtonRadioDirective.prototype.role;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype._hasFocus;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.el;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.cdr;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.group;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => ButtonRadioGroupDirective)),\n    multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nclass ButtonRadioGroupDirective {\n    /**\n     * @param {?} cdr\n     */\n    constructor(cdr) {\n        this.cdr = cdr;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n        this.role = 'radiogroup';\n    }\n    /**\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this._value = value;\n        this.onChange(value);\n    }\n    /**\n     * @return {?}\n     */\n    get tabindex() {\n        if (this._disabled) {\n            return null;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._value = value;\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    setDisabledState(disabled) {\n        if (this.radioButtons) {\n            this._disabled = disabled;\n            this.radioButtons.forEach((/**\n             * @param {?} buttons\n             * @return {?}\n             */\n            buttons => {\n                buttons.setDisabledState(disabled);\n            }));\n            this.cdr.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onFocus() {\n        if (this._disabled) {\n            return;\n        }\n        /** @type {?} */\n        const activeRadio = this.getActiveOrFocusedRadio();\n        if (activeRadio) {\n            activeRadio.focus();\n        }\n        else {\n            /** @type {?} */\n            const firstEnabled = this.radioButtons.find((/**\n             * @param {?} r\n             * @return {?}\n             */\n            r => !r.disabled));\n            if (firstEnabled) {\n                firstEnabled.focus();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    selectNext(event) {\n        this.selectInDirection('next');\n        event.preventDefault();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    selectPrevious(event) {\n        this.selectInDirection('previous');\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @private\n     * @param {?} direction\n     * @return {?}\n     */\n    selectInDirection(direction) {\n        if (this._disabled) {\n            return;\n        }\n        /**\n         * @param {?} currentIndex\n         * @param {?} buttonRadioDirectives\n         * @return {?}\n         */\n        function nextIndex(currentIndex, buttonRadioDirectives) {\n            /** @type {?} */\n            const step = direction === 'next' ? 1 : -1;\n            /** @type {?} */\n            let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\n            if (calcIndex < 0) {\n                calcIndex = buttonRadioDirectives.length - 1;\n            }\n            return calcIndex;\n        }\n        /** @type {?} */\n        const activeRadio = this.getActiveOrFocusedRadio();\n        if (activeRadio) {\n            /** @type {?} */\n            const buttonRadioDirectives = this.radioButtons.toArray();\n            /** @type {?} */\n            const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\n            for (let i = nextIndex(currentActiveIndex, buttonRadioDirectives); i !== currentActiveIndex; i = nextIndex(i, buttonRadioDirectives)) {\n                if (buttonRadioDirectives[i].canToggle()) {\n                    buttonRadioDirectives[i].toggleIfAllowed();\n                    buttonRadioDirectives[i].focus();\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getActiveOrFocusedRadio() {\n        return this.radioButtons.find((/**\n         * @param {?} button\n         * @return {?}\n         */\n        button => button.isActive)) || this.radioButtons.find((/**\n         * @param {?} button\n         * @return {?}\n         */\n        button => button.hasFocus));\n    }\n}\nButtonRadioGroupDirective.Éµfac = function ButtonRadioGroupDirective_Factory(t) { return new (t || ButtonRadioGroupDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ChangeDetectorRef)); };\nButtonRadioGroupDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: ButtonRadioGroupDirective, selectors: [[\"\", \"btnRadioGroup\", \"\"]], contentQueries: function ButtonRadioGroupDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        Éµngcc0.ÉµÉµcontentQuery(dirIndex, ButtonRadioDirective, 4);\n    } if (rf & 2) {\n        let _t;\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.radioButtons = _t);\n    } }, hostVars: 2, hostBindings: function ButtonRadioGroupDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"focus\", function ButtonRadioGroupDirective_focus_HostBindingHandler() { return ctx.onFocus(); })(\"blur\", function ButtonRadioGroupDirective_blur_HostBindingHandler() { return ctx.onBlur(); })(\"keydown.ArrowRight\", function ButtonRadioGroupDirective_keydown_ArrowRight_HostBindingHandler($event) { return ctx.selectNext($event); })(\"keydown.ArrowDown\", function ButtonRadioGroupDirective_keydown_ArrowDown_HostBindingHandler($event) { return ctx.selectNext($event); })(\"keydown.ArrowLeft\", function ButtonRadioGroupDirective_keydown_ArrowLeft_HostBindingHandler($event) { return ctx.selectPrevious($event); })(\"keydown.ArrowUp\", function ButtonRadioGroupDirective_keydown_ArrowUp_HostBindingHandler($event) { return ctx.selectPrevious($event); });\n    } if (rf & 2) {\n        Éµngcc0.ÉµÉµattribute(\"role\", ctx.role)(\"tabindex\", ctx.tabindex);\n    } }, features: [Éµngcc0.ÉµÉµProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR$1])] });\n/** @nocollapse */\nButtonRadioGroupDirective.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nButtonRadioGroupDirective.propDecorators = {\n    role: [{ type: HostBinding, args: ['attr.role',] }],\n    radioButtons: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => ButtonRadioDirective)),] }],\n    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    selectNext: [{ type: HostListener, args: ['keydown.ArrowRight', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }],\n    selectPrevious: [{ type: HostListener, args: ['keydown.ArrowLeft', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowUp', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(ButtonRadioGroupDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[btnRadioGroup]',\n                providers: [RADIO_CONTROL_VALUE_ACCESSOR$1]\n            }]\n    }], function () { return [{ type: Éµngcc0.ChangeDetectorRef }]; }, { role: [{\n            type: HostBinding,\n            args: ['attr.role']\n        }], tabindex: [{\n            type: HostBinding,\n            args: ['attr.tabindex']\n        }], \n    /**\n     * @return {?}\n     */\n    onFocus: [{\n            type: HostListener,\n            args: ['focus']\n        }], \n    /**\n     * @return {?}\n     */\n    onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }], \n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    selectNext: [{\n            type: HostListener,\n            args: ['keydown.ArrowRight', ['$event']]\n        }, {\n            type: HostListener,\n            args: ['keydown.ArrowDown', ['$event']]\n        }], \n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    selectPrevious: [{\n            type: HostListener,\n            args: ['keydown.ArrowLeft', ['$event']]\n        }, {\n            type: HostListener,\n            args: ['keydown.ArrowUp', ['$event']]\n        }], radioButtons: [{\n            type: ContentChildren,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => ButtonRadioDirective))]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.onChange;\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.onTouched;\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.role;\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.radioButtons;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioGroupDirective.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioGroupDirective.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioGroupDirective.prototype.cdr;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ButtonsModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return { ngModule: ButtonsModule, providers: [] };\n    }\n}\nButtonsModule.Éµfac = function ButtonsModule_Factory(t) { return new (t || ButtonsModule)(); };\nButtonsModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: ButtonsModule });\nButtonsModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(ButtonsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n                exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(ButtonsModule, { declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective], exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective, ButtonsModule, CHECKBOX_CONTROL_VALUE_ACCESSOR as Éµa, RADIO_CONTROL_VALUE_ACCESSOR$1 as Éµb, RADIO_CONTROL_VALUE_ACCESSOR as Éµc };\n\n"],"names":[],"sourceRoot":"webpack:///"}